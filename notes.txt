load:
	X only dirs
	- dirs with files

iterate:
	- compute:
		+ load stats
		- group by:
			+ name
			- name and size
			+ CUSTOM GROUPPER
		- collect:
			+ dir resources count
			- dir total size
			+ CUSTOM COLLECTOR

	- print:
		- print dirs:
			+ simply
			+ CUSTOM PRINTER

		- print files:
			+ simply
			+ CUSTOM PRINTER
filter:
	- filter matching:
		- dirs matching:
			+ pattern
			+ CUSTOM MATCHER

			- has at least X files matching:
				+ pattern
				- size
				+ CUSTOM MATCHER

		- files matching
			+ pattern
			- having extension(s)
			- bigger than size
			+ CUSTOM MATCHER

	- filter with duplicates:
		+ filter duplicate files:
			+ by name
			- by name and size
			+ by CUSTOM MATCHER
		- filter duplicate dirs:
			- with at least X duplicate files:
				+ by name
				- by name and size
				+ by CUSTOM MATCHER
			
			
TODO:
		- filter NOT matching (exclude)
		- filter dir having more than/LESS THAN count files matching ...
		- filter NOT duplicate (with no duplicity)
		- filter with MORE than one duplicity ?
	
----
context = fields 
fields = resources + metas + groups
resources: dir => [files]
meta[resource] = resource => whatever
group[resource] = resource => [resources]
stats meta: resource => stats

----
disketo script file = a file containing disketo skript
disketo script = a list of statements
statement = one "line" of the disketo script
operation = command name followed by the arguments (part of the statement)
command = a general definition of the instruction
instruction = particular command usage (with arguments)
program = a list of instructions

---
disketo script file
	V
(parse)
	V
disketo script (just the statements, lists of tokens)
	V
(analyse)
	V
disketo program (the syntax forrest)
	V
(prepare)
	V
disketo program 2 (the syntax forrest with all the semantic information and arguments resolved/evaluated)
	V
(interpret)
	V
result

disketo script v3 file syntax: 
SCRIPT := STATEMENTS

STATEMENTS := STATEMENT newline STATEMENTS | empty

STATEMENT := command_name COMMAND_ARGUMENTS

COMMAND_ARGUMENTS := ARGUMENTS

ARGUMENTS := ARGUMENT ARGUMENTS | empty

ARGUMENT := argument_name ARGUMENT_VALUE

ARGUMENT_VALUE := VALUE | ARGUMENT

VALUE := "text" | number | sub 

sample statement:
	test
		foo 42
		bar
		baz
			lorem "ok"
			ipsum "nok"
		aux sub { ... }


particularly:
	filter
		directories
		having
			at-least-than-files 10
			that 
				has-extension "txt"
			
or:
	print
		files
		simply



